/// <reference types="@swagger-api/apidom-core/types/minim" />
import * as _swagger_api_apidom_core from '@swagger-api/apidom-core';
import { MediaTypes, NamespacePluginOptions, StringElement, Element, ObjectElement, Meta, Attributes, NumberElement, BooleanElement, ArrayElement } from '@swagger-api/apidom-core';
export { isArrayElement, isBooleanElement, isElement, isLinkElement, isMemberElement, isNullElement, isNumberElement, isObjectElement, isRefElement, isStringElement } from '@swagger-api/apidom-core';
import * as minim from 'minim';
import * as stampit from 'stampit';
import stampit__default from 'stampit';

type Format = 'generic' | 'json' | 'yaml';
declare class JSONSchemaDraft4MediaTypes extends MediaTypes<string> {
    filterByFormat(format?: Format): string[];
    findBy(version?: string, format?: Format): string;
    latest(format?: Format): string;
}
declare const mediaTypes: JSONSchemaDraft4MediaTypes;

declare const jsonSchemaDraft4: {
    namespace: (options: NamespacePluginOptions) => minim.Namespace;
};

declare const plugin: () => () => {
    visitor: {
        StringElement(element: StringElement, key: any, parent: any, path: any, ancestors: any[]): any;
    };
};

declare const refract: <T extends Element>(value: any, { specPath, plugins, specificationObj, }?: {
    specPath?: string[] | undefined;
    plugins?: never[] | undefined;
    specificationObj?: {
        visitors: {
            value: stampit.default.Stamp<any>;
            JSONSchemaOrJSONReferenceVisitor: stampit.default.Stamp<any>;
            document: {
                objects: {
                    JSONSchema: {
                        $visitor: stampit.default.Stamp<any>;
                        fixedFields: {
                            id: stampit.default.Stamp<any>;
                            $schema: stampit.default.Stamp<any>;
                            multipleOf: stampit.default.Stamp<any>;
                            maximum: stampit.default.Stamp<any>;
                            exclusiveMaximum: stampit.default.Stamp<any>;
                            minimum: stampit.default.Stamp<any>;
                            exclusiveMinimum: stampit.default.Stamp<any>;
                            maxLength: stampit.default.Stamp<any>;
                            minLength: stampit.default.Stamp<any>;
                            pattern: stampit.default.Stamp<any>;
                            additionalItems: stampit.default.Stamp<any>;
                            items: stampit.default.Stamp<any>;
                            maxItems: stampit.default.Stamp<any>;
                            minItems: stampit.default.Stamp<any>;
                            uniqueItems: stampit.default.Stamp<any>;
                            maxProperties: stampit.default.Stamp<any>;
                            minProperties: stampit.default.Stamp<any>;
                            required: stampit.default.Stamp<any>;
                            properties: stampit.default.Stamp<any>;
                            additionalProperties: stampit.default.Stamp<any>;
                            patternProperties: stampit.default.Stamp<any>;
                            dependencies: stampit.default.Stamp<any>;
                            enum: stampit.default.Stamp<any>;
                            type: stampit.default.Stamp<any>;
                            allOf: stampit.default.Stamp<any>;
                            anyOf: stampit.default.Stamp<any>;
                            oneOf: stampit.default.Stamp<any>;
                            not: stampit.default.Stamp<any>;
                            definitions: stampit.default.Stamp<any>;
                            title: stampit.default.Stamp<any>;
                            description: stampit.default.Stamp<any>;
                            default: stampit.default.Stamp<any>;
                            format: stampit.default.Stamp<any>;
                            base: stampit.default.Stamp<any>;
                            links: stampit.default.Stamp<any>;
                            media: {
                                $ref: string;
                            };
                            readOnly: stampit.default.Stamp<any>;
                        };
                    };
                    JSONReference: {
                        $visitor: stampit.default.Stamp<any>;
                        fixedFields: {
                            $ref: stampit.default.Stamp<any>;
                        };
                    };
                    Media: {
                        $visitor: stampit.default.Stamp<any>;
                        fixedFields: {
                            binaryEncoding: stampit.default.Stamp<any>;
                            type: stampit.default.Stamp<any>;
                        };
                    };
                    LinkDescription: {
                        $visitor: stampit.default.Stamp<any>;
                        fixedFields: {
                            href: stampit.default.Stamp<any>;
                            rel: stampit.default.Stamp<any>;
                            title: stampit.default.Stamp<any>;
                            targetSchema: stampit.default.Stamp<any>;
                            mediaType: stampit.default.Stamp<any>;
                            method: stampit.default.Stamp<any>;
                            encType: stampit.default.Stamp<any>;
                            schema: stampit.default.Stamp<any>;
                        };
                    };
                };
            };
        };
    } | undefined;
}) => T;
declare const createRefractor: (specPath: string[]) => (value: any, options?: {}) => Element;

/**
 * Specification object allows us to have complete control over visitors
 * when traversing the ApiDOM.
 * Specification also allows us to create amended refractors from
 * existing ones by manipulating it.
 *
 * Note: Specification object allows to use absolute internal JSON pointers.
 */
declare const specification: {
    visitors: {
        value: stampit.default.Stamp<any>;
        JSONSchemaOrJSONReferenceVisitor: stampit.default.Stamp<any>;
        document: {
            objects: {
                JSONSchema: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        id: stampit.default.Stamp<any>;
                        $schema: stampit.default.Stamp<any>;
                        multipleOf: stampit.default.Stamp<any>;
                        maximum: stampit.default.Stamp<any>;
                        exclusiveMaximum: stampit.default.Stamp<any>;
                        minimum: stampit.default.Stamp<any>;
                        exclusiveMinimum: stampit.default.Stamp<any>;
                        maxLength: stampit.default.Stamp<any>;
                        minLength: stampit.default.Stamp<any>;
                        pattern: stampit.default.Stamp<any>;
                        additionalItems: stampit.default.Stamp<any>;
                        items: stampit.default.Stamp<any>;
                        maxItems: stampit.default.Stamp<any>;
                        minItems: stampit.default.Stamp<any>;
                        uniqueItems: stampit.default.Stamp<any>;
                        maxProperties: stampit.default.Stamp<any>;
                        minProperties: stampit.default.Stamp<any>;
                        required: stampit.default.Stamp<any>;
                        properties: stampit.default.Stamp<any>;
                        additionalProperties: stampit.default.Stamp<any>;
                        patternProperties: stampit.default.Stamp<any>;
                        dependencies: stampit.default.Stamp<any>;
                        enum: stampit.default.Stamp<any>;
                        type: stampit.default.Stamp<any>;
                        allOf: stampit.default.Stamp<any>;
                        anyOf: stampit.default.Stamp<any>;
                        oneOf: stampit.default.Stamp<any>;
                        not: stampit.default.Stamp<any>;
                        definitions: stampit.default.Stamp<any>;
                        title: stampit.default.Stamp<any>;
                        description: stampit.default.Stamp<any>;
                        default: stampit.default.Stamp<any>;
                        format: stampit.default.Stamp<any>;
                        base: stampit.default.Stamp<any>;
                        links: stampit.default.Stamp<any>;
                        media: {
                            $ref: string;
                        };
                        readOnly: stampit.default.Stamp<any>;
                    };
                };
                JSONReference: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        $ref: stampit.default.Stamp<any>;
                    };
                };
                Media: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        binaryEncoding: stampit.default.Stamp<any>;
                        type: stampit.default.Stamp<any>;
                    };
                };
                LinkDescription: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        href: stampit.default.Stamp<any>;
                        rel: stampit.default.Stamp<any>;
                        title: stampit.default.Stamp<any>;
                        targetSchema: stampit.default.Stamp<any>;
                        mediaType: stampit.default.Stamp<any>;
                        method: stampit.default.Stamp<any>;
                        encType: stampit.default.Stamp<any>;
                        schema: stampit.default.Stamp<any>;
                    };
                };
            };
        };
    };
};

/**
 * In Draft 4, $ref behaves a little differently. When an object contains a $ref property,
 * the object is considered a reference, not a schema. Therefore, any other properties you put in that object will
 * not be treated as JSON Schema keywords and will be ignored by the validator.
 * $ref can only be used where a schema is expected.
 *
 * URI: https://json-schema.org/understanding-json-schema/structuring.html?highlight=ref#id18
 */
declare class JSONReference extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get $ref(): StringElement | undefined;
    set $ref($ref: StringElement | undefined);
}

/**
 * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-hyperschema-00#section-4.3
 */
declare class Media extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get binaryEncoding(): StringElement | undefined;
    set binaryEncoding(binaryEncoding: StringElement | undefined);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
}

declare class JSONSchema extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    /**
     * Core vocabulary
     *
     * URI: https://tools.ietf.org/html/draft-wright-json-schema-00
     */
    get idProp(): StringElement | undefined;
    set idProp(idProp: StringElement | undefined);
    get $schema(): StringElement | undefined;
    set $schema($schema: StringElement | undefined);
    /**
     * Validation vocabulary
     *
     * URI: https://tools.ietf.org/html/draft-wright-json-schema-validation-00
     */
    /**
     *  Validation keywords for numeric instances (number and integer)
     */
    get multipleOf(): NumberElement | undefined;
    set multipleOf(multipleOf: NumberElement | undefined);
    get maximum(): NumberElement | undefined;
    set maximum(maximum: NumberElement | undefined);
    get exclusiveMaximum(): BooleanElement | undefined;
    set exclusiveMaximum(exclusiveMaximum: BooleanElement | undefined);
    get minimum(): NumberElement | undefined;
    set minimum(minimum: NumberElement | undefined);
    get exclusiveMinimum(): BooleanElement | undefined;
    set exclusiveMinimum(exclusiveMinimum: BooleanElement | undefined);
    /**
     * Validation keywords for strings
     */
    get maxLength(): NumberElement | undefined;
    set maxLength(maxLength: NumberElement | undefined);
    get minLength(): NumberElement | undefined;
    set minLength(minLength: NumberElement | undefined);
    get pattern(): StringElement | undefined;
    set pattern(pattern: StringElement | undefined);
    /**
     * Validation keywords for arrays
     */
    get additionalItems(): this | JSONReference | BooleanElement | undefined;
    set additionalItems(additionalItems: this | JSONReference | BooleanElement | undefined);
    get items(): this | JSONReference | ArrayElement | undefined;
    set items(items: this | JSONReference | ArrayElement | undefined);
    get maxItems(): NumberElement | undefined;
    set maxItems(maxItems: NumberElement | undefined);
    get minItems(): NumberElement | undefined;
    set minItems(minItems: NumberElement | undefined);
    get uniqueItems(): BooleanElement | undefined;
    set uniqueItems(uniqueItems: BooleanElement | undefined);
    /**
     * Validation keywords for objects
     */
    get maxProperties(): NumberElement | undefined;
    set maxProperties(maxProperties: NumberElement | undefined);
    get minProperties(): NumberElement | undefined;
    set minProperties(minProperties: NumberElement | undefined);
    get required(): ArrayElement | undefined;
    set required(required: ArrayElement | undefined);
    get properties(): ObjectElement | undefined;
    set properties(properties: ObjectElement | undefined);
    get additionalProperties(): this | JSONReference | BooleanElement | undefined;
    set additionalProperties(additionalProperties: this | JSONReference | BooleanElement | undefined);
    get patternProperties(): ObjectElement | undefined;
    set patternProperties(patternProperties: ObjectElement | undefined);
    get dependencies(): ObjectElement | undefined;
    set dependencies(dependencies: ObjectElement | undefined);
    /**
     *  Validation keywords for any instance type
     */
    get enum(): ArrayElement | undefined;
    set enum(enumValue: ArrayElement | undefined);
    get type(): ArrayElement | StringElement | undefined;
    set type(type: ArrayElement | StringElement | undefined);
    get allOf(): ArrayElement | undefined;
    set allOf(allOf: ArrayElement | undefined);
    get anyOf(): ArrayElement | undefined;
    set anyOf(anyOf: ArrayElement | undefined);
    get oneOf(): ArrayElement | undefined;
    set oneOf(oneOf: ArrayElement | undefined);
    get not(): this | JSONReference | undefined;
    set not(not: this | JSONReference | undefined);
    get definitions(): ObjectElement | undefined;
    set definitions(definitions: ObjectElement | undefined);
    /**
     * Metadata keywords
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00#section-6
     */
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get default(): Element | undefined;
    set default(defaultValue: Element | undefined);
    /**
     * Semantic validation with "format"
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00#section-7
     */
    get format(): StringElement | undefined;
    set format(format: StringElement | undefined);
    /**
     * JSON Hyper-Schema
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-hyperschema-00
     */
    get base(): StringElement | undefined;
    set base(base: StringElement | undefined);
    get links(): ArrayElement | undefined;
    set links(links: ArrayElement | undefined);
    get media(): Media | undefined;
    set media(media: Media | undefined);
    get readOnly(): BooleanElement | undefined;
    set readOnly(readOnly: BooleanElement | undefined);
}

/**
 * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-hyperschema-00#section-5
 */
declare class LinkDescription extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get href(): StringElement | undefined;
    set href(href: StringElement | undefined);
    get rel(): StringElement | undefined;
    set rel(rel: StringElement | undefined);
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get targetSchema(): JSONSchema | JSONReference | undefined;
    set targetSchema(targetSchema: JSONSchema | JSONReference | undefined);
    get mediaType(): StringElement | undefined;
    set mediaType(mediaType: StringElement | undefined);
    get method(): StringElement | undefined;
    set method(method: StringElement | undefined);
    get encType(): StringElement | undefined;
    set encType(encType: StringElement | undefined);
    get schema(): JSONSchema | JSONReference | undefined;
    set schema(schema: JSONSchema | JSONReference | undefined);
}

declare const isJSONSchemaElement: _swagger_api_apidom_core.ElementPredicate<JSONSchema>;
declare const isJSONReferenceElement: _swagger_api_apidom_core.ElementPredicate<JSONReference>;
declare const isMediaElement: _swagger_api_apidom_core.ElementPredicate<Media>;
declare const isLinkDescriptionElement: _swagger_api_apidom_core.ElementPredicate<LinkDescription>;

interface JSONReferenceLikeElement extends ObjectElement {
    hasKey: (value: '$ref') => true;
}
declare const isJSONReferenceLikeElement: (element: unknown) => element is JSONReferenceLikeElement;

/**
 * This is a base Type for every visitor that does
 * internal look-ups to retrieve other child visitors.
 */
declare const SpecificationVisitor: stampit__default.Stamp<any>;

/**
 * This visitor is responsible for falling back to current traversed element
 * Given JSONSchemaVisitor expects ObjectElement to be traversed. If
 * different Element is provided FallBackVisitor is responsible to assigning
 * this Element as current element.
 */
declare const FallbackVisitor: stampit__default.Stamp<any>;

declare const FixedFieldsVisitor: stampit__default.Stamp<any>;

declare const PatternedFieldsJsonObjectVisitor: stampit__default.Stamp<any>;

declare const MapVisitor: stampit__default.Stamp<any>;

declare const AlternatingVisitor: stampit__default.Stamp<any>;

declare const ParentSchemaAwareVisitor: stampit__default.Stamp<any>;

declare const getNodeType: <T extends Element>(element: T) => string | undefined;
declare const keyMap: {
    ObjectElement: string[];
    ArrayElement: string[];
    MemberElement: string[];
    StringElement: never[];
    BooleanElement: never[];
    NumberElement: never[];
    NullElement: never[];
    RefElement: never[];
    LinkElement: never[];
    Annotation: never[];
    Comment: never[];
    ParseResultElement: string[];
    SourceMap: string[];
    JSONSchemaDraft4Element: string[];
    JSONReferenceElement: string[];
    MediaElement: string[];
    LinkDescriptionElement: string[];
};

export { AlternatingVisitor, FallbackVisitor, FixedFieldsVisitor, JSONReference as JSONReferenceElement, JSONSchemaDraft4MediaTypes, JSONSchema as JSONSchemaElement, LinkDescription as LinkDescriptionElement, MapVisitor, Media as MediaElement, ParentSchemaAwareVisitor, PatternedFieldsJsonObjectVisitor as PatternedFieldsVisitor, SpecificationVisitor, createRefractor, jsonSchemaDraft4 as default, getNodeType, isJSONReferenceElement, isJSONReferenceLikeElement, isJSONSchemaElement, isLinkDescriptionElement, isMediaElement, keyMap, mediaTypes, refract, plugin as refractorPluginReplaceEmptyElement, specification as specificationObj };
